// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
INSERT INTO "Book" ( title, author , isbn , category) 
VALUES ($1, $2, $3, $4)
RETURNING id, title, author, isbn, category, availability_status
`

type CreateBookParams struct {
	Title    string `json:"title"`
	Author   string `json:"author"`
	Isbn     string `json:"isbn"`
	Category string `json:"category"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Title,
		arg.Author,
		arg.Isbn,
		arg.Category,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Isbn,
		&i.Category,
		&i.AvailabilityStatus,
	)
	return i, err
}

const deleteBookById = `-- name: DeleteBookById :exec
DELETE FROM "Book" WHERE id = $1
`

func (q *Queries) DeleteBookById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBookById, id)
	return err
}

const getBookById = `-- name: GetBookById :one
SELECT id, title, author, isbn, category, availability_status FROM "Book" WHERE id = $1
`

func (q *Queries) GetBookById(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRow(ctx, getBookById, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Isbn,
		&i.Category,
		&i.AvailabilityStatus,
	)
	return i, err
}

const getBookByIsbn = `-- name: GetBookByIsbn :one
SELECT id, title, author, isbn, category, availability_status FROM "Book" WHERE isbn = $1
`

func (q *Queries) GetBookByIsbn(ctx context.Context, isbn string) (Book, error) {
	row := q.db.QueryRow(ctx, getBookByIsbn, isbn)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Isbn,
		&i.Category,
		&i.AvailabilityStatus,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, title, author, isbn, category, availability_status FROM "Book"
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Isbn,
			&i.Category,
			&i.AvailabilityStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksByAvailablity = `-- name: GetBooksByAvailablity :many
SELECT id, title, author, isbn, category, availability_status FROM "Book" WHERE availability_status = $1
`

func (q *Queries) GetBooksByAvailablity(ctx context.Context, availabilityStatus bool) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooksByAvailablity, availabilityStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Isbn,
			&i.Category,
			&i.AvailabilityStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
INSERT INTO "Book" ( title, author , isbn, category, availability_status) 
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, author, isbn, category, availability_status
`

type UpdateBookParams struct {
	Title              string `json:"title"`
	Author             string `json:"author"`
	Isbn               string `json:"isbn"`
	Category           string `json:"category"`
	AvailabilityStatus bool   `json:"availability_status"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBook,
		arg.Title,
		arg.Author,
		arg.Isbn,
		arg.Category,
		arg.AvailabilityStatus,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Isbn,
		&i.Category,
		&i.AvailabilityStatus,
	)
	return i, err
}
