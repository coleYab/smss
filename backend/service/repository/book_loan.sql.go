// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book_loan.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createBookRent = `-- name: CreateBookRent :one
INSERT INTO "BookRent" (book_id, student_id, librarian_id, return_within, status, rent_date)
VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP)
RETURNING id, book_id, student_id, librarian_id, rent_date, return_within, status
`

type CreateBookRentParams struct {
	BookID       uuid.UUID `json:"book_id"`
	StudentID    uuid.UUID `json:"student_id"`
	LibrarianID  uuid.UUID `json:"librarian_id"`
	ReturnWithin int32     `json:"return_within"`
	Status       string    `json:"status"`
}

func (q *Queries) CreateBookRent(ctx context.Context, arg CreateBookRentParams) (BookRent, error) {
	row := q.db.QueryRow(ctx, createBookRent,
		arg.BookID,
		arg.StudentID,
		arg.LibrarianID,
		arg.ReturnWithin,
		arg.Status,
	)
	var i BookRent
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.StudentID,
		&i.LibrarianID,
		&i.RentDate,
		&i.ReturnWithin,
		&i.Status,
	)
	return i, err
}

const deleteBookRentById = `-- name: DeleteBookRentById :exec
DELETE FROM "BookRent" WHERE id = $1
`

func (q *Queries) DeleteBookRentById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteBookRentById, id)
	return err
}

const getBookRentById = `-- name: GetBookRentById :one
SELECT id, book_id, student_id, librarian_id, rent_date, return_within, status FROM "BookRent" WHERE id = $1
`

func (q *Queries) GetBookRentById(ctx context.Context, id uuid.UUID) (BookRent, error) {
	row := q.db.QueryRow(ctx, getBookRentById, id)
	var i BookRent
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.StudentID,
		&i.LibrarianID,
		&i.RentDate,
		&i.ReturnWithin,
		&i.Status,
	)
	return i, err
}

const getBookRentByLibrarianId = `-- name: GetBookRentByLibrarianId :many
SELECT id, book_id, student_id, librarian_id, rent_date, return_within, status FROM "BookRent" WHERE librarian_id = $1
`

func (q *Queries) GetBookRentByLibrarianId(ctx context.Context, librarianID uuid.UUID) ([]BookRent, error) {
	rows, err := q.db.Query(ctx, getBookRentByLibrarianId, librarianID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookRent
	for rows.Next() {
		var i BookRent
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.StudentID,
			&i.LibrarianID,
			&i.RentDate,
			&i.ReturnWithin,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookRentByStatus = `-- name: GetBookRentByStatus :many
SELECT id, book_id, student_id, librarian_id, rent_date, return_within, status FROM "BookRent" WHERE status = $1
`

func (q *Queries) GetBookRentByStatus(ctx context.Context, status string) ([]BookRent, error) {
	rows, err := q.db.Query(ctx, getBookRentByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookRent
	for rows.Next() {
		var i BookRent
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.StudentID,
			&i.LibrarianID,
			&i.RentDate,
			&i.ReturnWithin,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookRentByStudentId = `-- name: GetBookRentByStudentId :many
SELECT id, book_id, student_id, librarian_id, rent_date, return_within, status FROM "BookRent" WHERE student_id = $1
`

func (q *Queries) GetBookRentByStudentId(ctx context.Context, studentID uuid.UUID) ([]BookRent, error) {
	rows, err := q.db.Query(ctx, getBookRentByStudentId, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookRent
	for rows.Next() {
		var i BookRent
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.StudentID,
			&i.LibrarianID,
			&i.RentDate,
			&i.ReturnWithin,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookRents = `-- name: GetBookRents :many
SELECT id, book_id, student_id, librarian_id, rent_date, return_within, status FROM "BookRent"
`

func (q *Queries) GetBookRents(ctx context.Context) ([]BookRent, error) {
	rows, err := q.db.Query(ctx, getBookRents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookRent
	for rows.Next() {
		var i BookRent
		if err := rows.Scan(
			&i.ID,
			&i.BookID,
			&i.StudentID,
			&i.LibrarianID,
			&i.RentDate,
			&i.ReturnWithin,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookRent = `-- name: UpdateBookRent :one
UPDATE "BookRent" SET 
    book_id = $2, 
    student_id = $3, 
    librarian_id = $4, 
    return_within = $5, 
    status = $6
WHERE id = $1
RETURNING id, book_id, student_id, librarian_id, rent_date, return_within, status
`

type UpdateBookRentParams struct {
	ID           uuid.UUID `json:"id"`
	BookID       uuid.UUID `json:"book_id"`
	StudentID    uuid.UUID `json:"student_id"`
	LibrarianID  uuid.UUID `json:"librarian_id"`
	ReturnWithin int32     `json:"return_within"`
	Status       string    `json:"status"`
}

func (q *Queries) UpdateBookRent(ctx context.Context, arg UpdateBookRentParams) (BookRent, error) {
	row := q.db.QueryRow(ctx, updateBookRent,
		arg.ID,
		arg.BookID,
		arg.StudentID,
		arg.LibrarianID,
		arg.ReturnWithin,
		arg.Status,
	)
	var i BookRent
	err := row.Scan(
		&i.ID,
		&i.BookID,
		&i.StudentID,
		&i.LibrarianID,
		&i.RentDate,
		&i.ReturnWithin,
		&i.Status,
	)
	return i, err
}
